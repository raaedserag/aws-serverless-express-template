service: cardigoo-users-service-app
frameworkVersion: "3"
configValidationMode: error
useDotenv: true
deprecationNotificationMode: warn:summary

custom:
  tableName: "users-table-${sls:stage}"
  layersStackName: "cardigoo-users-service-layers-${sls:stage}"

provider:
  name: aws
  tags:
    SERVICE: ${self:service}
  stackTags:
    SERVICE: ${self:service}
  deploymentMethod: changesets

  runtime: nodejs18.x
  memorySize: 512
  timeout: 6
  versionFunctions: false
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
  environment:
    NODE_PATH: "/opt/node_modules"
  # httpApi:
  #   disableDefaultEndpoint: true
  #   cors: true
  #   payload: "2.0"
    # authorizers:
    #   cognitoAuthorizer:
    #     identitySource: $request.header.Authorization
    #     issuerUrl: ${self:custom.userPoolIssuer}
    #     audience: ${self:custom.userPoolClientId}
    #     name: CognitoUserPoolAuthorizer
    #     resultTtlInSeconds: 300
    #     type: COGNITO_USER_POOLS

package:
  patterns:
    - "!**"
    - "index.js"
    - "src/**"
    - "package.json"
    - "package-lock.json"

functions:
  api:
    handler: index.handler
    layers:
      - ${cf:${self:custom.layersStackName}.NodeModulesLambdaLayerQualifiedArn}
    events:
      - httpApi: '*'
    environment:
      USERS_TABLE: ${self:custom.tableName}

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
